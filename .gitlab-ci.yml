image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/stormforger/ci-playground
  SF_ORG: "demo"
  SF_DS_PREFIX: "example-gitlab-ci"
  TARGET_ENV_STAGING: "staging"
  TARGET_ENV_PRODUCTION: "production"

stages:
  - build # build the app
  - staging:deploy
  - staging:test
  - production:deploy
  - production:test

# ==== templates ====

.forge:
  image:
    name: stormforger/cli:latest
    entrypoint: [""]

# ===== Stage: Build ====

format:
  stage: build
  except: ["schedules"]
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)

gotest:
  stage: build
  except: ["schedules"]
  script:
    - go test -race $(go list ./... | grep -v /vendor/)

compile:
  stage: build
  except: ["schedules"]
  script:
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/mybinary
  artifacts:
    paths:
      - mybinary

sf:ping:
  stage: build
  extends: .forge
  script:
    - forge ping # check that we can reach the API and our token is correct

# ===== staging:deploy ====

deploy_staging:
  stage: staging:deploy
  except: ["schedules"]
  resource_group: staging
  script:
  - sleep 1 # dummy step - out of scope

# ===== staging:test ====

sf:loadtest_staging:
  stage: staging:test
  except: ["schedules"]
  resource_group: staging
  extends: .forge
  script:
    - ./scripts/data-source.sh "${TARGET_ENV}"
    - forge datasource push ${SF_ORG} ./*.csv --name-prefix-path="${SF_DS_PREFIX}/${TARGET_ENV}/" --auto-field-names
    - |
      forge test-case launch "${TESTCASE}" --test-case-file="loadtest/loadtest.mjs" \
        --define ENV=\"${TARGET_ENV}\" \
        --title="${TITLE}" --notes="${NOTES}" ${LAUNCH_ARGS}
  variables:
    TARGET_ENV: "${TARGET_ENV_STAGING}"
    LAUNCH_ARGS: "--validate"
    NOTES: |
      Name | Value
      ---- | -----
      Ref  | ${CI_COMMIT_REF_NAME}
      Sha  | ${CI_COMMIT_SHA}
      Job#    | [${CI_JOB_ID}](${CI_JOB_URL})
      Concurrent# | ${CI_CONCURRENT_ID}
      User    | ${GITLAB_USER_LOGIN}

      Message:
      ${CI_COMMIT_MESSAGE}
    TITLE: "#${CI_CONCURRENT_ID} (${CI_COMMIT_SHORT_SHA})"
    TESTCASE: "${SF_ORG}/example-gitlab-ci-${TARGET_ENV_STAGING}"

# ===== production:deploy ====

deploy_production:
  stage: production:deploy
  only:
    refs:
      - master
  except: ["schedules"]
  resource_group: production
  script:
  - sleep 1 # dummy step - out of scope

# ===== production:test ====

sf:loadtest_production:
  stage: production:test
  only:
    refs:
      - master
  extends: .forge
  resource_group: production
  script:
    - ./scripts/data-source.sh "${TARGET_ENV}"
    - forge datasource push ${SF_ORG} ./*.csv --name-prefix-path="${SF_DS_PREFIX}/${TARGET_ENV}/" --auto-field-names

    - |
      forge test-case launch "${TESTCASE}" --test-case-file="loadtest/loadtest.mjs" \
        --define ENV=\"${TARGET_ENV}\" \
        --title="${TITLE}" --notes="${NOTES}" ${LAUNCH_ARGS}
  variables:
    TARGET_ENV: "${TARGET_ENV_PRODUCTION}"
    LAUNCH_ARGS: "--nfr-check-file=./loadtest/loadtest.nfr.yaml"
    NOTES: |
      Name | Value
      ---- | -----
      Ref  | ${CI_COMMIT_REF_NAME}
      Sha  | ${CI_COMMIT_SHA}
      Job#    | [${CI_JOB_ID}](${CI_JOB_URL})
      Concurrent# | ${CI_CONCURRENT_ID}
      User    | ${GITLAB_USER_LOGIN}

      Message:
      ${CI_COMMIT_MESSAGE}
    TITLE: "#${CI_CONCURRENT_ID} (${CI_COMMIT_SHORT_SHA})"
    TESTCASE: "${SF_ORG}/example-gitlab-ci-${TARGET_ENV_PRODUCTION}"
